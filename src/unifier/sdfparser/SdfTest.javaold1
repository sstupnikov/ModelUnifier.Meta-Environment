	package unifier.sdfparser;

import java.io.*;
import org.antlr.runtime.*;
import org.antlr.runtime.debug.DebugEventSocketProxy;


import unifier.sdfparser.*;
import org.antlr.runtime.tree.CommonTree;
import antlr.debug.misc.ASTFrame;
import unifier.asfsdf.SdfCreator;
import unifier.asfsdf.Module;
import unifier.asfsdf.AsfSsdfFormattingWriter;
import unifier.util.FormattingWriter;
import unifier.util.DefaultFormattingWriter;
import java.util.HashSet;
import java.util.Set;
import unifier.SDF2RS;
import unifier.util.StringHelper;


public class SdfTest {

    public static void main(String args[]) throws Exception {

        Reader r1 = new FileReader("D:\\Documents\\Serge\\Research\\rfbr\\06-07-08072-\u043E\u0444\u0438\\\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 OWL\\unifier\\synthesis\\Synthesis-Syntax.sdf");
        Reader r2 = new FileReader("D:\\Documents\\Serge\\Research\\rfbr\\06-07-08072-\u043E\u0444\u0438\\\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 OWL\\unifier\\owl\\OWL-Syntax.sdf");

        //SdfLexer lex = new SdfLexer(new ANTLRFileStream("D:\\Documents\\Serge\\Research\\rfbr\\06-07-08072-\u043E\u0444\u0438\\\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 OWL\\unifier\\synthesis\\Synthesis-Syntax.sdf"));
        //SdfLexer lex = new SdfLexer(new ANTLRFileStream("D:\\Documents\\Serge\\Research\\rfbr\\06-07-08072-\u043E\u0444\u0438\\\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 OWL\\unifier\\owl\\OWL-Syntax.sdf"));

        SdfLexer lex = new SdfLexer(new ANTLRReaderStream(r1));
        CommonTokenStream tokens = new CommonTokenStream(lex);

        SdfParser g = new SdfParser(tokens);
        try {

            // parsing
            System.out.println("Module rule started.");
            SdfParser.module_return r = g.module();
            System.out.println("Module rule finished.");

            // viewing a tree
            CommonTree tree = (CommonTree)r.getTree();
            if(tree == null) System.out.println("Tree is null.");
            CommonTree t = (CommonTree) r.getTree();
            System.out.println(t.toStringTree());


            // creating and viewing sdf module
            AsfSsdfFormattingWriter w = new AsfSsdfFormattingWriter(DefaultFormattingWriter.createSystemOutWriter());

            Set<String> terminals = new HashSet<String>();

            //terminals.add("OwlID");
            //terminals.add("DataLiteral");
            //terminals.add("URIreference");
            //terminals.add("TypedLiteral");
            //terminals.add("PlainLiteral");
            //terminals.add("LexicalForm");
            //terminals.add("LanguageTag");
            //terminals.add("NFCString");


            //terminals.add("Synthesis-Id");
            //terminals.add("Formula");
            //terminals.add("Term");
            //terminals.add("Typed-Variable");
            //terminals.add("Type-Expression");
            //terminals.add("Reduct");
            //terminals.add("Arithmetic-Expression");


            Module module = (new SdfCreator()).module(tree, terminals);

            w.translatorHeader(module);

            // Generate Reference Schema
            SDF2RS sdf2rs = new SDF2RS(module, DefaultFormattingWriter.createSystemOutWriter());
            sdf2rs.generateSchema();

        } catch (RecognitionException e) {
            e.printStackTrace();
        }
    }
}
